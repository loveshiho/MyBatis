<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.akai.mapper.EmpMapper">
    <!--
     1 接口的名字和Mapper映射为文件名字必须保持一致(不包含拓展名)
     2 Mapper映射文件的namespace必须是接口的全路径名
     3 sql语句的id必须是对应方法的名
     4 DeptMapper映射文件应该和接口编译之后放在同一个目录下
     -->
    <!--List<Emp> findAll();-->
    <select id="findAll" resultType="emp">
        select * from db_01.emp
    </select>
    <!--
     单个基本数据类型作方法参数
     -->
    <!--Emp findById(int empno);-->
    <select id="findById" resultType="emp">
        select * from db_01.emp where EMPNO = #{id}
    </select>
    <!--
     多个个基本数据类型作方法参数
     方式1 arg*     arg0 arg1 arg2 数字是索引,从0开始
     方式2 param*   param1 param2 param3 数字是编号,从1开始
     使用别名
     List<Emp> findByDeptnoAndSal(@Param("detpno") int deptno, @Param("sal") double sal);
     通过@Param注解使用别名之后,就不能再使用arg* 但是可以继续使用param*
     -->
    <!--List<Emp> findByIdAndSal(int id, double sal);-->
    <select id="findByIdAndSal" resultType="emp">
        <!--select * from emp where deptno =#{arg0} and sal >= #{arg1}-->
        select * from emp where deptno = #{deptno} and sal >= #{sal}
    </select>
    <!--
     多个引用类型作为方法参数
     List<Emp> findByDeptnoAndSal2(@Param("empa") Emp empa,@Param("empb") Emp empb);
     如果用@Param定义了别名,那么就不能使用arg*.属性名,
     但是可以使用param*.属性名和别名.属性名
    -->
    <select id="findByIdAndSal2" resultType="emp"  >
        <!-- select * from emp where deptno = #{arg0.deptno} and sal >= #{arg1.sal} -->
        select * from db_01.emp where deptno = #{empa.deptno} and sal >= #{empb.sal}
    </select>

</mapper>